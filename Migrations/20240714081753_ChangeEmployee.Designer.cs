// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store_Management.Data;

#nullable disable

namespace Store_Management.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20240714081753_ChangeEmployee")]
    partial class ChangeEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Store_Management.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6637),
                            IsActive = false,
                            Name = "Le Trung Ha"
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6621),
                            IsActive = true,
                            Name = "LTCompany"
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Stationery"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Office Supplies"
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Ha Noi, Viet Nam",
                            Age = 30,
                            CitizenId = "0049393859",
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6548),
                            Email = "admin@gmail.com",
                            FullName = "Le Trung Ha",
                            IsActive = true,
                            Password = "AQAAAAEAACcQAAAAELkmiywABvS7CuDMOizvFZAcM0PFm41LpVWfrviktituMRaltQuJab+Nvm4fu84AKQ==",
                            RoleId = 0
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.KPIRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSalesAmount")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("KPIRecords");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Store_Management.Data.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6649),
                            IsActive = false,
                            Name = "NXB Kim Dong"
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Store_Management.Data.Models.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Book", b =>
                {
                    b.HasBaseType("Store_Management.Data.Models.Product");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6677),
                            Description = "Classic novel by F. Scott Fitzgerald",
                            ImageUrl = "the_great_gatsby.jpg",
                            IsActive = true,
                            Name = "The Great Gatsby",
                            Price = 10.99m,
                            AuthorId = 1,
                            ISBN = "BK235",
                            PublicationYear = 2025,
                            PublisherId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6680),
                            Description = "Dystopian novel by George Orwell",
                            ImageUrl = "1984.jpg",
                            IsActive = true,
                            Name = "1984",
                            Price = 10.99m,
                            AuthorId = 1,
                            ISBN = "BK235",
                            PublicationYear = 2025,
                            PublisherId = 1
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Stationery", b =>
                {
                    b.HasBaseType("Store_Management.Data.Models.Product");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.HasIndex("BrandId");

                    b.ToTable("Stationeries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6694),
                            Description = "Novel by Harper Lee",
                            ImageUrl = "to_kill_a_mockingbird.jpg",
                            IsActive = true,
                            Name = "To Kill a Mockingbird",
                            Price = 7.99m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6696),
                            Description = "100-page A4 notebook",
                            ImageUrl = "a4_notebook.jpg",
                            IsActive = true,
                            Name = "A4 Notebook",
                            Price = 2.50m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6700),
                            Description = "Blue ballpoint pen",
                            ImageUrl = "ballpoint_pen.jpg",
                            IsActive = true,
                            Name = "Ballpoint Pen",
                            Price = 0.99m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6702),
                            Description = "Set of 5 highlighters",
                            ImageUrl = "highlighter_set.jpg",
                            IsActive = true,
                            Name = "Highlighter Set",
                            Price = 5.49m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6705),
                            Description = "Pack of sticky notes",
                            ImageUrl = "sticky_notes.jpg",
                            IsActive = true,
                            Name = "Sticky Notes",
                            Price = 1.99m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6707),
                            Description = "Office desk organizer",
                            ImageUrl = "desk_organizer.jpg",
                            IsActive = true,
                            Name = "Desk Organizer",
                            Price = 12.99m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6709),
                            Description = "Set of 10 file folders",
                            ImageUrl = "file_folders.jpg",
                            IsActive = true,
                            Name = "File Folders",
                            Price = 9.99m,
                            BrandId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2024, 7, 14, 15, 17, 52, 970, DateTimeKind.Local).AddTicks(6710),
                            Description = "Ream of A4 printer paper",
                            ImageUrl = "printer_paper.jpg",
                            IsActive = true,
                            Name = "Printer Paper",
                            Price = 4.99m,
                            BrandId = 1
                        });
                });

            modelBuilder.Entity("Store_Management.Data.Models.Category", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Category", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Store_Management.Data.Models.KPIRecord", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Product", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Sale", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_Management.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Store_Management.Data.Models.SaleDetail", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_Management.Data.Models.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Book", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_Management.Data.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("Store_Management.Data.Models.Book", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_Management.Data.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Stationery", b =>
                {
                    b.HasOne("Store_Management.Data.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store_Management.Data.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("Store_Management.Data.Models.Stationery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Store_Management.Data.Models.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
